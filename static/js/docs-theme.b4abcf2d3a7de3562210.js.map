{"version":3,"sources":["/github/workspace/src/docs/theme.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2WAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,yBADR,yBAGA,+FAA8E,0BAAYC,WAAW,KAAvB,YAA9E,gEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4GASL,iBAAQ,CACN,GAAM,sCADR,sCAGA,yCAAwB,0BAAYA,WAAW,KAAvB,YAAxB,wBAAqG,0BAAYA,WAAW,KAAvB,SAArG,8DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4QAgBL,iBAAQ,CACN,GAAM,iBADR,iBAGA,sDAAqC,0BAAYA,WAAW,KAAvB,qBAArC,QAA2G,0BAAYA,WAAW,KAAvB,oBAA3G,6CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mEAIL,iBAAQ,CACN,GAAM,sBADR,sBAGA,4EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oTAiBL,sBACE,kBAAIA,WAAW,MAAf,iBAAsC,sBAAQA,WAAW,MAAnB,QAAtC,uBAAuG,0BAAYA,WAAW,MAAvB,YAAvG,+EAA4O,0BAAYA,WAAW,MAAvB,qBAA5O,O,wKAMNJ,EAAWK,gBAAiB","file":"static/js/docs-theme.1be85e0f.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"theming\"\n    }}>{`Theming`}</h1>\n    <h2 {...{\n      \"id\": \"create-a-custom-theme\"\n    }}>{`Create a custom theme`}</h2>\n    <p>{`The recommended way to create a custom theme is to create a file named `}<inlineCode parentName=\"p\">{`theme.js`}</inlineCode>{`, you can add your custom values and override existing ones.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// theme.js\n\nexport default {\n  \"color-primary\": \"red\",\n  \"btn-color\": \"var(--color-primary)\"\n};\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-your-theme-in-your-application\"\n    }}>{`Use your theme in your application`}</h2>\n    <p>{`Pi-ui exposes an `}<inlineCode parentName=\"p\">{`useTheme`}</inlineCode>{` hook that accepts a `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` argument. All CSS properties will be updated accordingly.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from \"react\";\nimport { render } from \"react-dom\";\nimport { useTheme } from \"pi-ui\";\nimport theme from \"./theme\";\n\nconst App = () => {\n  useTheme(theme);\n  return (\n    // App jsx\n  )\n};\n\nrender(<App />, document.getElementById(\"root\"));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"default-theme\"\n    }}>{`Default theme`}</h2>\n    <p>{`There are two default themes, `}<inlineCode parentName=\"p\">{`defaultLightTheme`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`defaultDarkTheme`}</inlineCode>{`. They are both name exported from pi-ui.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { defaultLightTheme, defaultDarkTheme } from \"pi-ui\";\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"use-theme-property\"\n    }}>{`Use theme property`}</h2>\n    <p>{`You can use any property from a theme in your code:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import React from \"react\";\nimport { useTheme, defaultLightTheme } from \"pi-ui\";\n\nconst Test = () => {\n  const theme = useTheme(defaultLightTheme);\n  /*\n  theme = {\n    \"color-primary\": \"#2970ff\",\n    \"color-primary-dark\": \"#091440\",\n    \"color-primary-light\": \"#2ed8a3\"\n    ...\n  }\n  */\n}\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Note that you `}<strong parentName=\"li\">{`have`}</strong>{` to pass a theme to `}<inlineCode parentName=\"li\">{`useTheme`}</inlineCode>{` everytime if you are using a custom theme, otherwise it will be set to the `}<inlineCode parentName=\"li\">{`defaultLightTheme`}</inlineCode>{`.`}</li>\n    </ul>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}